
如果使用lib中定义好的错误action，请添加/ErrorPage/(403|404|500|etc).html

ConfigHelper中的配置请在appsetting中设置

lib中的日志组件使用common.logging

部分组件使用autofac注册依赖（使用方法参考autofac文档）

autofac注册示例(在Application_Start开头添加AppContext.AddExtraRegistrar(new FullDependencyRegistrar());)

    public class FullDependencyRegistrar : IDependencyRegistrar
    {
        public void Register(ref ContainerBuilder builder)
        {
            //注册控制器
            builder.RegisterControllers(this.GetType().Assembly);
            //Aop拦截
            builder.RegisterType<AopLogError>();
            //缓存
            var UseRedis = false;
            if (UseRedis)
            {
                builder.RegisterType<RedisCacheProvider>().As<ICacheProvider>().SingleInstance();
            }
            else
            {
                builder.RegisterType<MemoryCacheProvider>().As<ICacheProvider>().SingleInstance();
            }
            builder.RegisterType<EntityDB>().As<DbContext>();

            #region 注册Data
            //注册数据访问层
            foreach (var t in typeof(EFManager).Assembly.GetTypes())
            {
                if (t.BaseType != null && t.BaseType.IsGenericType && t.BaseType.GetGenericTypeDefinition() == typeof(EFBase<>))
                {
                    var interfaces = t.BaseType.GetInterfaces().Where(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(IRepository<>));
                    if (interfaces?.Count() > 0)
                    {
                        builder.RegisterType(t).As(interfaces.ToArray());
                    }
                    else
                    {
                        builder.RegisterType(t).As(t);
                    }
                }
            }
            #endregion

            #region 注册service
            var serviceAss = typeof(ServiceBase<>).Assembly;
            //注册service
            foreach (var t in serviceAss.GetTypes())
            {
                //注册service
                if (t.BaseType != null && t.BaseType.IsGenericType && t.BaseType.GetGenericTypeDefinition() == typeof(ServiceBase<>))
                {
                    var interfaces = t.GetInterfaces().Where(x => x.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IServiceBase<>)));
                    if (interfaces?.Count() > 0)
                    {
                        builder.RegisterType(t).As(interfaces.ToArray()).EnableClassInterceptors();
                    }
                    else
                    {
                        builder.RegisterType(t).As(t).EnableClassInterceptors();
                    }
                }
            }
            #endregion

            #region 注册事件
            var ass = new Assembly[] { serviceAss };
            //事件注册
            var consumerType = typeof(IConsumer<>);
            foreach (var a in ass)
            {
                try
                {
                    //找到包含consumer的类
                    var types = a.GetTypes().Where(x => x.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == consumerType));
                    foreach (var t in types)
                    {
                        //找到接口
                        var interfaces = t.GetInterfaces().Where(x => x.IsGenericType && x.GetGenericTypeDefinition() == consumerType).ToArray();
                        //注册到所有接口
                        builder.RegisterType(t).As(interfaces).InstancePerLifetimeScope();
                    }
                }
                catch (Exception e)
                {
                    //Entity Framework 6不允许get types，抛了一个异常
                    e.AddLog("注册事件发布异常");
                    continue;
                }
            }
            builder.RegisterType<EventPublisher>().As<IEventPublisher>().SingleInstance();
            #endregion
        }
    }

示例web.config

<?xml version="1.0" encoding="utf-8"?>
<!--
  有关如何配置 ASP.NET 应用程序的详细信息，请访问
  http://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
  <configSections>
    <!--公共日志组件配置-->
    <sectionGroup name="common">
      <section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" />
    </sectionGroup>
    <!--注册日志组件-->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
    <!--申明EF节点-->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
  </configSections>
  <!--配置公共日志组件使用log4net的实现-->
  <common>
    <logging>
      <factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net1211">
        <!--<arg key="configType" value="INLINE" />-->
        <arg key="configType" value="FILE-WATCH" />
        <arg key="configFile" value="~/App_Data/Config/log4net.config" />
      </factoryAdapter>
    </logging>
  </common>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />

    <add key="LoadPlugin" value="true" />

    <add key="sign_key" value="cqmyg-ysdss-jtwmy-dtsgx" />

    <add key="CookieDomain" value="" />
    <!--允许跨域ajax的域名-->
    <add key="Origin_Allow" value="local" />

    <!--域名用逗号隔开-->
    <add key="AllowDomains" value="" />

    <add key="SmptServer" value="smtp.epcservices.com.cn" />
    <add key="SmptLoginName" value="reception@epcservices.com.cn" />
    <add key="SmptPassWord" value="****" />
    <add key="SmptSenderName" value="EPC_WEBSITE" />
    <add key="SmptEmailAddress" value="reception@epcservices.com.cn" />

    <add key="FeedBackEmail" value="reception@epcservices.com.cn" />

    <add key="SSOLoginUrl" value="http://localhost/account/login/" />
    <add key="SSOLogoutUrl" value="http://localhost/account/logoutsso/" />
    <add key="CheckLoginInfoUrl" value="http://localhost/account/CheckChildSiteToken/" />

    <add key="CallBackUrl" value="Account/GetCallBackResult/" />
    <add key="DefaultRedirectUrl" value="Page/Home/" />

    <add key="QiniuAccessKey" value="IJ0GgfyMaCR_k-4yOVX6Ji_LImhMxjcnvOz2zBNP" />
    <add key="QiniuSecretKey" value="Kk5-w2nxc1b_MpjhC4ocPr9jfK36O11vaGVEY6hD" />
    <add key="QiniuBucketName" value="hiwjcn" />
    <add key="QiniuBaseUrl" value="http://hiwjcn.qiniudn.com/" />

    <!--1年-->
    <add key="CookieExpiresMinutes" value="525600" />
    <add key="CacheExpiresMinutes" value="5" />
  </appSettings>
  <connectionStrings>
    <add name="MySqlConnectionString" connectionString="database=hiwjcn;server=127.0.0.1;port=3306;characterset=utf8;user id=root;password=123;connectiontimeout=3" />
    <add name="RedisConnectionString" connectionString="172.16.42.28:6379,password=1q2w3e4r5T" />
  </connectionStrings>
  <system.web>
    <httpRuntime requestValidationMode="2.0" targetFramework="4.5" />
    <compilation debug="true" targetFramework="4.5" />
    <!--<trust level="Full" originUrl="" />-->
    <globalization fileEncoding="utf-8" requestEncoding="utf-8" responseEncoding="utf-8" responseHeaderEncoding="utf-8" />
    <!--MVC中无法使用 ResponseRewrite（暂时使用aspx作为错误页面）asp.net自定义错误404不返回404状态，这里禁用了，自己过滤错误-->
    <customErrors mode="RemoteOnly" defaultRedirect="/ErrorPage/404.html" redirectMode="ResponseRewrite">
      <error statusCode="404" redirect="/ErrorPage/404.html" />
      <error statusCode="403" redirect="/ErrorPage/403.html" />
      <error statusCode="500" redirect="/ErrorPage/500.html" />
    </customErrors>
    <pages validateRequest="false"></pages>
    <!--<sessionState mode="StateServer" stateConnectionString="tcpip=127.0.0.1:42424" timeout="30"></sessionState>-->
    <sessionState cookieName="SID" mode="Custom" customProvider="MySqlSessionProvider">
      <providers>
        <!--使用mysql保存session，使用mysql.web组件（安装此组建会自动添加很多配置节点，只要保留下面节点就可以了）-->
        <!--http://dev.mysql.com/downloads/connector/net/ 选择source code下载-->
        <add name="MySqlSessionProvider" type="Lib.mvc.MySQLSessionProvider,Lib" AppID="1024" />
        <!--也可以使用redis存储session，组件：RedisSessionStateProvider-->
      </providers>
    </sessionState>
  </system.web>
  <system.net>
    <settings>
      <!--解决错误：服务器提交了协议冲突. Section=ResponseHeader Detail=CR 后面必须是 LF 在 Syst-->
      <httpWebRequest useUnsafeHeaderParsing="true" />
    </settings>
  </system.net>
  <system.webServer>
    <!--这个是定义iis错误页面（iis7+有效），上面的是定义asp.net错误页面，只有File才能保持错误状态-->
    <!--<httpErrors errorMode="Custom" existingResponse="Replace" defaultResponseMode="ExecuteURL">
      <clear />
      <error responseMode="File" statusCode="404" path="ErrorPage\404.html" />
      <error responseMode="File" statusCode="403" path="ErrorPage\403.html" />
      <error responseMode="File" statusCode="400" path="ErrorPage\500.html" />
    </httpErrors>-->
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true" />
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Autofac" publicKeyToken="17863af14b0044da" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.0" newVersion="3.5.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="MySql.Data" publicKeyToken="c5687fc88969c44d" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.9.9.0" newVersion="6.9.9.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <!--配置EF节点开始-->
  <entityFramework>
    <defaultConnectionFactory type="MySql.Data.Entity.MySqlConnectionFactory,MySql.Data.Entity.EF6"></defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
      <provider invariantName="MySql.Data.MySqlClient" type="MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d"></provider>
    </providers>
  </entityFramework>
  <!--配置EF节点结束-->
  <system.data>
    <DbProviderFactories>
      <remove invariant="MySql.Data.MySqlClient" />
      <add name="MySQL Data Provider" invariant="MySql.Data.MySqlClient" description=".Net Framework Data Provider for MySQL" type="MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d" />
    </DbProviderFactories>
  </system.data>
</configuration>